/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Analizador.AnalizadorLexico;
import Token.Token;
import WindowsListener.IrAlMenu;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author baquiax
 */
public class ReporteGeneral extends javax.swing.JFrame {

    AnalizadorLexico analizador;
    DefaultTableModel tablaModel;
    int indice = -1;

    /**
     * Creates new form ReporteGeneral
     *
     * @param menu
     * @param analizador
     */
    public ReporteGeneral(JFrame menu, AnalizadorLexico analizador) {
        initComponents();
        this.analizador = analizador;
        llenarDatosGenerales();
        llenarLexemas();
        llenarTokens();
        IrAlMenu irAlMenu = new IrAlMenu(menu, this);
        super.addWindowListener(irAlMenu);
        super.setLayout(null);
        super.setLocationRelativeTo(null);
        super.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtTitulo = new javax.swing.JLabel();
        General = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblGeneral = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtblLexema = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblTokens = new javax.swing.JTable();
        btnHistorial = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reporte de Token's");

        txtTitulo.setFont(new java.awt.Font("Ubuntu", 0, 36)); // NOI18N
        txtTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtTitulo.setText("Reporte de Tokens");

        jtblGeneral.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lexema", "Token", "Columna", "Fila"
            }
        ));
        jScrollPane1.setViewportView(jtblGeneral);

        General.addTab("Reporte General", jScrollPane1);

        jtblLexema.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lexema", "Token", "Cantidad"
            }
        ));
        jScrollPane3.setViewportView(jtblLexema);

        General.addTab("Lexemas", jScrollPane3);

        jtblTokens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Token", "Cantidad"
            }
        ));
        jScrollPane2.setViewportView(jtblTokens);

        General.addTab("Token's", jScrollPane2);

        btnHistorial.setText("Historial");
        btnHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistorialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(General)
                    .addComponent(txtTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(212, 212, 212)
                .addComponent(btnHistorial)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTitulo)
                .addGap(18, 18, 18)
                .addComponent(General, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHistorial)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistorialActionPerformed
        // TODO add your handling code here:
        indice = jtblGeneral.getSelectedRow();
        if (indice >= 0) {
            JOptionPane.showMessageDialog(null, analizador.getTokensValidos().get(indice).getRuta(),
                    "Ruta del Token: " + analizador.getTokensValidos().get(indice).getToken(),
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnHistorialActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane General;
    private javax.swing.JButton btnHistorial;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jtblGeneral;
    private javax.swing.JTable jtblLexema;
    private javax.swing.JTable jtblTokens;
    private javax.swing.JLabel txtTitulo;
    // End of variables declaration//GEN-END:variables

    /**
     * Llena los datos de los tokens validos
     */
    private void llenarDatosGenerales() {
        tablaModel = (DefaultTableModel) this.jtblGeneral.getModel();
        for (Token dato : this.analizador.getTokensValidos()) {
            String[] data = new String[]{
                dato.getToken(),
                dato.getTipoToken().toString(),
                dato.getColumna() + "",
                dato.getFila() + ""
            };
            tablaModel.addRow(data);
        }
    }

    /**
     * Llena los datos de los tokens validos
     */
    private void llenarLexemas() {
        List<Token> lexemasUnicos = new ArrayList<>();
        lexemasUnicos = hallarLexemasUnicos();
        lexemasUnicos = conteoDeLexema(lexemasUnicos);
        tablaModel = (DefaultTableModel) this.jtblLexema.getModel();
        for (Token dato : lexemasUnicos) {
            String[] data = new String[]{
                dato.getToken(),
                dato.getTipoToken().toString(),
                dato.getCantidad() + ""
            };
            tablaModel.addRow(data);
        }
    }

    /**
     * Halla los lexemas unicos
     *
     * @return
     */
    private List<Token> hallarLexemasUnicos() {
        List<Token> lexemasUnicos = new ArrayList<>();
        for (Token token : analizador.getTokensValidos()) {
            if (!existeLexema(token, lexemasUnicos)) {
                lexemasUnicos.add(token);
            }
        }
        return lexemasUnicos;
    }

    /**
     * Valida si un lexema existe
     *
     * @param token
     * @param lexemasUnicos
     * @return
     */
    private boolean existeLexema(Token token, List<Token> lexemasUnicos) {
        for (Token lexema : lexemasUnicos) {
            if (token.getToken().equals(lexema.getToken())) {
                return true;
            }
        }
        return false;
    }

    /**
     * Cuenta los tokens
     *
     * @param lexemasUnicos
     * @return
     */
    private List<Token> conteoDeLexema(List<Token> lexemasUnicos) {
        for (Token lexemaUnico : lexemasUnicos) {
            for (Token token : analizador.getTokensValidos()) {
                if (lexemaUnico.getToken().equals(token.getToken())) {
                    lexemaUnico.setCantidad(lexemaUnico.getCantidad() + 1);
                }
            }
        }
        return lexemasUnicos;
    }

    /**
     * Llena los tokens del analizador
     */
    private void llenarTokens() {
        List<Token> tokensUnicos = new ArrayList<>();
        tokensUnicos = hallarTokensExistentes();
        tokensUnicos = conteoDeTokens(tokensUnicos);
        tablaModel = (DefaultTableModel) this.jtblTokens.getModel();
        for (Token dato : tokensUnicos) {
            String[] data = new String[]{
                dato.getTipoToken().toString(),
                dato.getCantidadToken() + ""
            };
            tablaModel.addRow(data);
        }
    }

    private List<Token> hallarTokensExistentes() {
        List<Token> tokensUnicos = new ArrayList<>();
        for (Token token : analizador.getTokensValidos()) {
            if (!existeToken(token, tokensUnicos)) {
                tokensUnicos.add(token);
            }
        }
        return tokensUnicos;
    }

    /**
     * Valida si un token existe
     *
     * @param token
     * @param lexemasUnicos
     * @return
     */
    private boolean existeToken(Token token, List<Token> tokensUnicos) {
        for (Token token2 : tokensUnicos) {
            if (token2.getTipoToken().equals(token.getTipoToken())) {
                return true;
            }
        }
        return false;
    }

    /**
     * Cuenta los tokens
     *
     * @param lexemasUnicos
     * @return
     */
    private List<Token> conteoDeTokens(List<Token> tokensUnicos) {
        for (Token lexemaUnico : tokensUnicos) {
            for (Token token : analizador.getTokensValidos()) {
                if (lexemaUnico.getToken().equals(token.getToken())) {
                    lexemaUnico.setCantidadToken(lexemaUnico.getCantidadToken()+ 1);
                }
            }
        }
        return tokensUnicos;
    }
}
